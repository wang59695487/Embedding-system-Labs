; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\misc.o --depend=.\obj\misc.d --device=DARMSTM --apcs=interwork -O3 -I.\FWlib\inc -I.\user -I.\CM3 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\misc.crf FWlib\SRC\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=1

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;113    {
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  230f              MOVS     r3,#0xf
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000004  78c4              LDRB     r4,[r0,#3]
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;125        tmppre = (0x4 - tmppriority);
;;;126        tmpsub = tmpsub >> tmppriority;
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;130        tmppriority = tmppriority << 0x04;
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000006  7801              LDRB     r1,[r0,#0]
000008  f04f22e0          MOV      r2,#0xe000e000        ;124
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00000c  2701              MOVS     r7,#1
00000e  b1e4              CBZ      r4,|L1.74|
000010  f8d24d0c          LDR      r4,[r2,#0xd0c]        ;124
000014  7886              LDRB     r6,[r0,#2]            ;129
000016  f40464e0          AND      r4,r4,#0x700          ;124
00001a  f5c464e0          RSB      r4,r4,#0x700          ;124
00001e  0a24              LSRS     r4,r4,#8              ;124
000020  f1c40504          RSB      r5,r4,#4              ;125
000024  40e3              LSRS     r3,r3,r4              ;126
000026  7844              LDRB     r4,[r0,#1]            ;128
000028  401e              ANDS     r6,r6,r3              ;129
00002a  40ac              LSLS     r4,r4,r5              ;128
00002c  4326              ORRS     r6,r6,r4              ;129
00002e  0133              LSLS     r3,r6,#4              ;129
000030  4411              ADD      r1,r1,r2              ;132
000032  f8813400          STRB     r3,[r1,#0x400]        ;132
000036  7800              LDRB     r0,[r0,#0]
000038  0941              LSRS     r1,r0,#5
00003a  f000001f          AND      r0,r0,#0x1f
00003e  eb020181          ADD      r1,r2,r1,LSL #2
000042  4087              LSLS     r7,r7,r0
000044  f8c17100          STR      r7,[r1,#0x100]
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
000048  bdf0              POP      {r4-r7,pc}
                  |L1.74|
00004a  f001001f          AND      r0,r1,#0x1f           ;141
00004e  4087              LSLS     r7,r7,r0              ;141
000050  0948              LSRS     r0,r1,#5              ;141
000052  eb020080          ADD      r0,r2,r0,LSL #2       ;141
000056  f8c07180          STR      r7,[r0,#0x180]        ;141
00005a  bdf0              POP      {r4-r7,pc}
;;;145    
                          ENDP


                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4902              LDR      r1,|L2.12|
;;;97     {
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4308              ORRS     r0,r0,r1
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;103    }
000008  4770              BX       lr
;;;104    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x05fa0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  4a02              LDR      r2,|L3.12|
;;;157    { 
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000002  4011              ANDS     r1,r1,r2
000004  4301              ORRS     r1,r1,r0
000006  4802              LDR      r0,|L3.16|
000008  6001              STR      r1,[r0,#0]
;;;163    }
00000a  4770              BX       lr
;;;164    
                          ENDP

                  |L3.12|
                          DCD      0x1fffff80
                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=1

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  f04f22e0          MOV      r2,#0xe000e000
;;;176    {
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;180      
;;;181      if (NewState != DISABLE)
000004  2900              CMP      r1,#0
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
000006  f8d21d10          LDR      r1,[r2,#0xd10]
00000a  d001              BEQ      |L4.16|
00000c  4301              ORRS     r1,r1,r0
00000e  e000              B        |L4.18|
                  |L4.16|
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000010  4381              BICS     r1,r1,r0
                  |L4.18|
000012  f8c21d10          STR      r1,[r2,#0xd10]        ;183
;;;188      }
;;;189    }
000016  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
000006  6908              LDR      r0,[r1,#0x10]
000008  d102              BNE      |L5.16|
00000a  f0400004          ORR      r0,r0,#4
00000e  e001              B        |L5.20|
                  |L5.16|
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000010  f0200004          BIC      r0,r0,#4
                  |L5.20|
000014  6108              STR      r0,[r1,#0x10]         ;205
;;;210      }
;;;211    }
000016  4770              BX       lr
;;;212    
                          ENDP

